
-------------------------------------------------
-- PACKAGE ASISTENCIA
-------------------------------------------------

CREATE OR REPLACE PACKAGE  PKG_ASISTENCIA IS 
    PROCEDURE SP_INSERTAR_ASISTENCIA(estadoID IN ASISTENCIA.id_estado%type, valida OUT NUMBER);
    PROCEDURE SP_MODIFICAR_ASISTENCIA(ASISTENCIAID IN asistencia.id_asistencia%type, estadoID IN ASISTENCIA.id_estado%type, valida OUT NUMBER);
    PROCEDURE SP_ELIMINAR_ASISTENCIA(asistenciaID IN asistencia.id_asistencia%type, valida OUT NUMBER);
    PROCEDURE SP_BUSCAR_ASISTENCIA(asistenciaID IN asistencia.id_asistencia%type, entidad OUT SYS_REFCURSOR ,valida OUT NUMBER);
    PROCEDURE SP_LISTAR_ASISTENCIA(lista OUT SYS_REFCURSOR, valida OUT NUMBER);
END PKG_ASISTENCIA;

-------------------------------------------------
-- PACKAGE ERRORES
-------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_ERRORES IS 
    reg_errores REGISTRO_ERROR%ROWTYPE;
    v_fecha date DEFAULT sysdate;
    v_hora registro_error.hora%type DEFAULT TO_CHAR(sysdate,'HH24:MI:SS');
    PROCEDURE sp_errores(correlativo IN registro_error.id%type, p_codigo_error IN registro_error.codigo_error%type, p_mensaje IN REGISTRO_ERROR.MENSAJE_ERROR%TYPE, p_subprogrma registro_error.subprograma%type, p_fecha  IN registro_error.fecha%type, p_hora IN registro_error.hora%type);
END PKG_ERRORES;

----------------------------------------------------
-- PACKAGE BOBY ERRORES
----------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PKG_ERRORES IS 
    PROCEDURE sp_errores(correlativo IN registro_error.id%type, p_codigo_error IN registro_error.codigo_error%type, p_mensaje IN REGISTRO_ERROR.MENSAJE_ERROR%TYPE, p_subprogrma registro_error.subprograma%type, p_fecha  IN registro_error.fecha%type, p_hora IN registro_error.hora%type)
    IS
    BEGIN 
        INSERT INTO registro_error VALUES (correlativo, p_codigo_error, p_mensaje, p_subprogrma, p_fecha, p_hora);
    END sp_errores;
END PKG_ERRORES;
----------------------------------------------------
-- PACKAGE BOBY ASISTENCIA
----------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PKG_ASISTENCIA IS
    PROCEDURE SP_INSERTAR_ASISTENCIA(estadoID IN ASISTENCIA.id_estado%type, valida OUT NUMBER) is
    reg_asistencia asistencia%rowtype;
    BEGIN 
        valida := 0;
        reg_asistencia.id_asistencia := seq_asistencia.nextval;
        reg_asistencia.fecha := sysdate;
        reg_asistencia.hora :=  TO_CHAR(sysdate,('HH24:MI:SS'));
        reg_asistencia.id_estado:= estadoID;
        INSERT INTO asistencia VALUES reg_asistencia;
        valida := 1;
        COMMIT;
    EXCEPTION
        WHEN too_many_rows THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_INSERTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN invalid_number THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_INSERTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
      PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN no_data_found THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_INSERTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN zero_divide THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_INSERTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN OTHERS THEN 
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_INSERTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
    END SP_INSERTAR_ASISTENCIA;
    
    PROCEDURE SP_ELIMINAR_ASISTENCIA(asistenciaID IN asistencia.id_asistencia%type, valida OUT NUMBER) IS
    BEGIN
        valida := 0;
        delete from asistencia where id_asistencia = asistenciaID;
        IF sql%rowcount > 0 THEN
            valida := 1;
        END IF;
        COMMIT;
    EXCEPTION
        WHEN too_many_rows THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_ELIMINAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN invalid_number THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_ELIMINAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN no_data_found THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_ELIMINAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN zero_divide THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_ELIMINAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN OTHERS THEN 
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_ELIMINAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);

    END SP_ELIMINAR_ASISTENCIA;
    
    PROCEDURE SP_MODIFICAR_ASISTENCIA(ASISTENCIAID IN asistencia.id_asistencia%type, estadoID IN ASISTENCIA.id_estado%type, valida OUT NUMBER)IS
    BEGIN
        valida := 0;
        UPDATE asistencia SET id_estado = estadoID where id_asistencia = asistenciaID;
        IF sql%rowcount > 0 THEN
            valida := 1;
        END IF;
        COMMIT;
    EXCEPTION
        WHEN too_many_rows THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_MODIFICAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN invalid_number THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_MODIFICAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN no_data_found THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_MODIFICAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN zero_divide THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_MODIFICAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN OTHERS THEN 
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_MODIFICAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
    END SP_MODIFICAR_ASISTENCIA;
    
    PROCEDURE SP_BUSCAR_ASISTENCIA(asistenciaID IN asistencia.id_asistencia%type, entidad OUT SYS_REFCURSOR ,valida OUT NUMBER) IS
        v_cantidad NUMBER default 0;
    BEGIN 
            valida := 0;
        SELECT COUNT(*) INTO v_cantidad FROM asistencia where id_asistencia = asistenciaID;
        IF v_cantidad > 0 THEN 
            OPEN entidad FOR SELECT a.id_asistencia,asig.descripcion, c.fecha, c.hora_inicio, c.hora_termino,e.descripcion, a.fecha,a.hora,alu.rut,  
                                                        alu.nombre || ' '|| alu.nombre_s ||' '|| alu.nombre_t ||' '|| alu.apellido_p||' '|| alu.apellido_m as nombre
                                                        FROM ASISTENCIA a
                                                        INNER JOIN DETALLE_ASISTENCIA det_a
                                                        ON a.id_asistencia = det_a.id_asistencia
                                                        INNER JOIN CLASE c
                                                        ON det_a.id_clase = c.id_clase
                                                        INNER JOIN detalle_CLASE_ALU det_c
                                                        ON c.id_clase = det_c.id_clase
                                                        INNER JOIN PERSONA alu
                                                        ON det_c.rut_alumno = alu.rut
                                                        INNER JOIN ASIGNATURA asig
                                                        ON c.id_asignatura = asig.id_asignatura
                                                        INNER JOIN ESTADO_ASISTENCIA e
                                                        ON a.id_estado = e.id_estado
                                                        WHERE a.id_asistencia = asistenciaID;
            valida := 1;
        END IF;
            EXCEPTION
                WHEN too_many_rows THEN
                    PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
                    PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
                    PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
                    PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_BUSCAR_ASISTENCIA';
                    PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
                    PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
                    PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
                WHEN invalid_number THEN
                    PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
                    PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
                    PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
                    PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_BUSCAR_ASISTENCIA';
                    PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
                    PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
                    PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
                WHEN no_data_found THEN
                    PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
                    PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
                    PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
                    PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_BUSCAR_ASISTENCIA';
                    PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
                    PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
                    PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
                WHEN zero_divide THEN
                    PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
                    PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
                    PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
                    PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_BUSCAR_ASISTENCIA';
                    PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
                    PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
                    PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
                WHEN OTHERS THEN 
                    PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
                    PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
                    PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
                    PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_BUSCAR_ASISTENCIA';
                    PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
                    PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
                    PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
    END SP_BUSCAR_ASISTENCIA;
    
    PROCEDURE SP_LISTAR_ASISTENCIA(lista OUT SYS_REFCURSOR, valida OUT NUMBER) IS
    v_cantidad NUMBER DEFAULT 0;
    BEGIN
        valida := 0;
        SELECT COUNT(*) INTO v_cantidad FROM asistencia;
        IF v_cantidad > 0 THEN 
        OPEN lista FOR SELECT a.id_asistencia,asig.descripcion, c.fecha, c.hora_inicio, c.hora_termino,e.descripcion, a.fecha,a.hora,alu.rut,  
                                                        alu.nombre || ' '|| alu.nombre_s ||' '|| alu.nombre_t ||' '|| alu.apellido_p||' '|| alu.apellido_m as nombre
                                                        FROM ASISTENCIA a
                                                        INNER JOIN DETALLE_ASISTENCIA det_a
                                                        ON a.id_asistencia = det_a.id_asistencia
                                                        INNER JOIN CLASE c
                                                        ON det_a.id_clase = c.id_clase
                                                        INNER JOIN detalle_CLASE_ALU det_c
                                                        ON c.id_clase = det_c.id_clase
                                                        INNER JOIN PERSONA alu
                                                        ON det_c.rut_alumno = alu.rut
                                                        INNER JOIN ASIGNATURA asig
                                                        ON c.id_asignatura = asig.id_asignatura
                                                        INNER JOIN ESTADO_ASISTENCIA e
                                                        ON a.id_estado = e.id_estado
                                                        order by asig.descripcion asc, c.fecha asc;
        valida := 1;
        END IF;
    EXCEPTION
        WHEN too_many_rows THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN invalid_number THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN no_data_found THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN zero_divide THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN OTHERS THEN 
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
    END SP_LISTAR_ASISTENCIA;
    
END PKG_ASISTENCIA;


CREATE OR REPLACE PACKAGE  PKG_ALUMNO IS 
    PROCEDURE SP_LISTAR_ALUMNO(lista OUT SYS_REFCURSOR, valida OUT NUMBER);
END PKG_ALUMNO;


CREATE OR REPLACE PACKAGE BODY PKG_ALUMNO IS
    
    PROCEDURE SP_LISTAR_ALUMNO(lista OUT SYS_REFCURSOR, valida OUT NUMBER) IS
    v_cantidad NUMBER DEFAULT 0;
    BEGIN
        valida := 0;
        SELECT COUNT(*) INTO v_cantidad FROM persona;
        IF v_cantidad > 0 THEN 
        OPEN lista FOR SELECT * from persona p
                                INNER JOIN ALUMNO a
                                ON p.rut = a.rut_alumno;
        valida := 1;
        END IF;
    EXCEPTION
        WHEN too_many_rows THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se retornan más filas de las requeridas.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN invalid_number THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una conversión númerica que no coincide con el tipo de dato definido.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN no_data_found THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'No se encuentran datos.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN zero_divide THEN
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := 'Se intentó hacer una división por 0.';
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
        WHEN OTHERS THEN 
            PKG_ERRORES.reg_errores.id := seq_errores.NEXTVAL;
            PKG_ERRORES.reg_errores.codigo_error := SQLCODE;
            PKG_ERRORES.reg_errores.mensaje_error := sqlerrm;
            PKG_ERRORES.reg_errores.SUBPROGRAMA := 'PKG_ASISTENCIA.SP_LISTAR_ASISTENCIA';
            PKG_ERRORES.reg_errores.FECHA := PKG_ERRORES.v_fecha;
            PKG_ERRORES.reg_errores.HORA := PKG_ERRORES.v_hora;
            PKG_ERRORES.sp_errores (PKG_ERRORES.reg_errores.id , PKG_ERRORES.reg_errores.codigo_error, PKG_ERRORES.reg_errores.mensaje_error, PKG_ERRORES.reg_errores.SUBPROGRAMA, PKG_ERRORES.reg_errores.FECHA, PKG_ERRORES.reg_errores.HORA);
    END SP_LISTAR_ALUMNO;
    
END PKG_ALUMNO;

